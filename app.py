import streamlit as st
import matplotlib.pyplot as plt
import numpy as np

# ------------------------------
# Rob√¥ e Movimento
# ------------------------------
class Robo:
    def __init__(self):
        self.x = 0
        self.y = 0
        self.direcao = 0  # 0=N,1=E,2=S,3=W
        self.trajetoria = [(self.x,self.y)]
        self.pontos = 0
        self.colisoes = 0
    
    def move_forward(self, obstaculos=None, grid_size=10):
        dx, dy = 0,0
        if self.direcao==0: dy=1
        elif self.direcao==1: dx=1
        elif self.direcao==2: dy=-1
        elif self.direcao==3: dx=-1
        
        nx, ny = self.x+dx, self.y+dy
        # Checar colis√µes
        if obstaculos and (nx,ny) in obstaculos:
            self.colisoes += 1
        elif 0 <= nx < grid_size and 0 <= ny < grid_size:
            self.x, self.y = nx, ny
            self.trajetoria.append((self.x,self.y))
            self.pontos += 1
    
    def turn_left(self): self.direcao = (self.direcao-1)%4
    def turn_right(self): self.direcao = (self.direcao+1)%4
    def reset(self):
        self.x, self.y, self.direcao = 0,0,0
        self.trajetoria = [(self.x,self.y)]
        self.pontos = 0
        self.colisoes = 0

# ------------------------------
# Ambiente
# ------------------------------
def desenha_ambiente(robo, grid_size=10, obstaculos=None, linha=None):
    ambiente = np.zeros((grid_size, grid_size))
    if obstaculos:
        for ox, oy in obstaculos:
            if 0 <= ox < grid_size and 0 <= oy < grid_size:
                ambiente[oy, ox] = 1

    plt.figure(figsize=(6,6))
    plt.imshow(ambiente, cmap="binary", origin="lower")
    
    # Linha de refer√™ncia (seguidor de linha)
    if linha:
        lx, ly = zip(*linha)
        plt.plot(lx, ly, 'b--', lw=2, label="Linha")
    
    # Trajet√≥ria
    if len(robo.trajetoria) > 1:
        tx, ty = zip(*robo.trajetoria)
        plt.plot(tx, ty, 'orange', lw=2, label="Trajet√≥ria")
    
    # Rob√¥
    plt.scatter(robo.x, robo.y, c="red", s=200, edgecolors="black", marker="o", label="Rob√¥")
    dx, dy = 0, 0
    if robo.direcao==0: dy=0.4
    elif robo.direcao==1: dx=0.4
    elif robo.direcao==2: dy=-0.4
    elif robo.direcao==3: dx=-0.4
    plt.arrow(robo.x, robo.y, dx, dy, head_width=0.2, head_length=0.2, fc='red', ec='red')
    
    plt.title("Mini Laborat√≥rio de Rob√≥tica ‚Äì Avan√ßado")
    plt.legend()
    st.pyplot(plt)

# ------------------------------
# M√≥dulo 0 ‚Äì Fundamentos Te√≥ricos
# ------------------------------
def modulo_fundamentos():
    st.subheader("M√≥dulo 0 ‚Äì Fundamentos Te√≥ricos")
    st.markdown("""
    ### üîπ Matem√°tica
    - √Ålgebra Linear: vetores, matrizes, rota√ß√µes.
    - Trigonometria: c√°lculo de √¢ngulos e movimentos.
    - C√°lculo Diferencial: velocidade e acelera√ß√£o.
    - Estat√≠stica: sensores e ru√≠do.
    
    ### üîπ F√≠sica
    - Cinem√°tica: movimento e coordenadas.
    - Din√¢mica: for√ßas, torque, leis de Newton.
    - Eletr√¥nica: motores e atuadores.
    
    ### üîπ Ci√™ncia da Computa√ß√£o
    - Programa√ß√£o: Python, C++, ROS.
    - Controle: PID, sensores, atuadores.
    - IA: navega√ß√£o aut√¥noma, vis√£o computacional.
    """)
    
    st.markdown("### üìù Mini Quiz")
    q1 = st.radio("Qual lei de Newton explica a√ß√£o e rea√ß√£o?", 
                  ["1¬™ Lei ‚Äì In√©rcia", "2¬™ Lei ‚Äì F=ma", "3¬™ Lei ‚Äì A√ß√£o e Rea√ß√£o"])
    if q1 == "3¬™ Lei ‚Äì A√ß√£o e Rea√ß√£o": st.success("‚úÖ Correto!")
    elif q1: st.warning("‚ùå Tente novamente.")

# ------------------------------
# Dashboard avan√ßado
# ------------------------------
def dashboard(robo):
    st.subheader("üìä Painel de M√©tricas")
    st.markdown(f"- Posi√ß√£o: ({robo.x}, {robo.y})")
    st.markdown(f"- Dire√ß√£o: {['Norte','Leste','Sul','Oeste'][robo.direcao]}")
    st.markdown(f"- Passos dados: {len(robo.trajetoria)-1}")
    st.markdown(f"- Pontos: {robo.pontos}")
    st.markdown(f"- Colis√µes: {robo.colisoes}")

# ------------------------------
# Fun√ß√£o de gamifica√ß√£o: medalhas
# ------------------------------
def medalhas(robo):
    if robo.pontos >= 10 and robo.colisoes == 0:
        st.success("üèÖ Medalha Ouro ‚Äì Perfeito!")
    elif robo.pontos >= 5:
        st.info("ü•à Medalha Prata ‚Äì Bom desempenho")
    else:
        st.warning("ü•â Medalha Bronze ‚Äì Continue praticando")

# ------------------------------
# Interface principal
# ------------------------------
def main():
    st.title("üöÄ Mini Laborat√≥rio de Rob√≥tica ‚Äì Avan√ßado e Gamificado")
    
    # Sidebar: sele√ß√£o de m√≥dulo
    modulo = st.sidebar.selectbox("Escolha o m√≥dulo", 
                                  ["0-Fundamentos","1-Movimento","2-Sensores",
                                   "3-Planejamento","4-Aut√¥nomo","5-IA"])
    
    # Obst√°culos e linha de exemplo
    obstaculos = [(4,4),(6,6)]
    linha = [(0,0),(1,1),(2,2),(3,3),(4,4),(5,5)]
    
    # Sess√£o do rob√¥
    if "robo" not in st.session_state: st.session_state.robo = Robo()
    robo = st.session_state.robo
    
    if modulo=="0-Fundamentos":
        modulo_fundamentos()
    else:
        dashboard(robo)
        desenha_ambiente(robo, obstaculos=obstaculos, linha=(linha if modulo=="4-Aut√¥nomo" else None))
        
        col1, col2, col3, col4 = st.columns(4)
        if col1.button("Mover Frente"): robo.move_forward(obstaculos=obstaculos)
        if col2.button("Virar Esquerda"): robo.turn_left()
        if col3.button("Virar Direita"): robo.turn_right()
        if col4.button("Reset"): robo.reset()
        
        medalhas(robo)

# ------------------------------
if __name__ == "__main__":
    main()

